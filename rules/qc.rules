#-*- mode: snakemake -*-
"""
Snakemake rules for quality control of rna-seq.
"""

QC_INTERIM = join(INTERIM_DIR, 'rnaseq', 'qc')
QC_PROCESSED = join(PROCESSED_DIR, 'rnaseq', 'qc')

extra_conf_fn = srcdir('qc.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)      
include:
    'qc/rseqc.rules'
include:
    'qc/picard.rules'
include:
    'qc/preseq.rules'
include:
    'qc/qort.rules'

if len(config['read_geometry']) > 1:
    rule qc_bam:
        input:
            expand(rules.qc_bam_rseqc_read_distribution.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_junction_annotation.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_junction_saturation.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_tin.output, sample=SAMPLES),
            expand(rules.qc_bam_picard_rnametrics.output, sample=SAMPLES),
            expand(rules.qc_bam_preseq_lc_extrap.output, sample=SAMPLES),
            expand(rules.qc_bam_qorts.output, sample=SAMPLES),
            expand(rules.qc_bam_picard_insertsize.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_inner_distance.output, sample=SAMPLES)
else:
    rule qc_bam:
        input:
            expand(rules.qc_bam_rseqc_read_distribution.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_junction_annotation.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_junction_saturation.output, sample=SAMPLES),
            expand(rules.qc_bam_rseqc_tin.output, sample=SAMPLES),
            expand(rules.qc_bam_picard_rnametrics.output, sample=SAMPLES),
            expand(rules.qc_bam_preseq_lc_extrap.output, sample=SAMPLES),
            expand(rules.qc_bam_qorts.output, sample=SAMPLES)
            
include:
    'qc/multiqc.rules'
