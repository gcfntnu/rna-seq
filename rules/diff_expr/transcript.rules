#-*- mode: snakemake -*-
"""
Snakemake rules for transcript differential expression

Sleuth for situations where bootstraped transcript estimation exists (kallisto, salmon)

Ballgown for transcript counts, tpm, rpkm 

SAMseq if many replicates in two-factor experiments.

High presicion : star - stringtie - ballgown - fpkm
High recall : (salmon star) - (deseq2, limma-voom)

Dependencies
------------

sleuth :
ballgown : 

"""
import os
from os.path import join
import yaml

# load analysis config
import snakemake
model_fn = snakemake.workflow.srcdir('transcript_diffexp_config.yaml')
model = yaml.load(open(model_fn))
print(model)

def sleuth_input(wildcards):
    if model['quant'] == 'salmon':
        file_patt = join(config['tmp_dir'], 'salmon_quasi', '{sample}', 'abundance.h5')
        snakemake.logger.info(file_patt)
        return expand(file_patt, sample=SAMPLES)
    elif model['quant'] == 'kallisto':
        return expand(rules.pseudo_align.output, sample=SAMPLES)
    else:
        raise ValueError
    
rule sleuth:
    input:
        files = sleuth_input,
        sample_info = rules.create_sample_info.output,
        transcript_info = rules.create_transcript_info.output
    params:
        condition = model['condition'],
        ref_level = model['ref_level'],
        org = model['organism'],
        output = join(model['model_dir'], 'sleuth.transcript')
        
    shell:
        'Rscript src/scripts/sleuth_diffexp.R '
        '{input.files} '
        '--sample-info {input.sample_info} '
        '--transcript-info {input.transcript_info} '
        '--output-tpm '
        '--condition {params.condition} '
        '--reference-level {params.ref_level} '
        '--output {params.output} '
        '--output-rds '
        '-v '

rule sleuth_models:
    input:
        dynamic(join(model['model_dir'], 'sleuth.transcript.{condition}.testtable'))
    output:
        touch('.sleuth_models.exported')
    params:
        qval = 0.2,
        prefix =  'data/processed/'
    run:
        import pandas as pd
        for fn in input:
            df = pd.read_csv(fn, sep='\t', index_col=0)
            df = df[['transcript_id', 'gene_id', 'gene_name', 'transcript_biotype', 'b', 'qval']]
            #df = df[df['transcript_biotype']=='protein_coding']
            df = df[df['qval']< params.qval]
            bn = os.path.basename(fn)
            out_fn = os.path.join(params.prefix, bn + '.xls')
            print(out_fn)
            df.to_excel(out_fn)

#rule ballgown:
    
#rule samseq:
