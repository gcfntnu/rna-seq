#-*- mode:snakemake -*-
extra_conf_fn = srcdir('transcriptome.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

TACO_ORG_MAP = {'homo_sapiens': 'human', 'mus_musculus': 'mouse'}
BASE_REF_DIR = config['base_ref_dir']

if config['assembly']['transcriptome']['merge']['type'] == 'bam':
    for k, v in config['samples'].items():
        pass


def get_merge_bam(wildcards):
    pass

rule merged_bam:
    input:
        expand(join(ALIGN_INTERIM, ALIGNER, '{sample}.sorted.bam'), sample=SAMPLES)
    output:
        join(ASSEMBLY_INTERIM, '{}_merged.bam')
    threads:
        4
    singularity:
        'docker://' + config['docker']['sambamaba']
    shell:
        'sambamba merge -t {threads} {output} {input}'


rule stringtie:
    input:
        gtf = join(BASE_REF_DIR, 'genes', 'genes.gtf'),
        bam = get_sorted_bam
    output:
        gtf = join(ASSEMBLY_INTERIM, 'stringtie', '{sample}.gtf')
    params:
        lib_type = '--fr' if LIBPREP['strand'] == 'reverse' else '--rf' if LIBPREP['strand'] == 'forward' else ''
    threads:
        8
    singularity:
        'docker://' + config['docker']['stringtie']
    shell:
        'stringtie '
        '-p {threads} '
        '-G {input.gtf} '
        '-l {wildcards.sample} '
        '-o {output} '
        '{params.lib_type} '
        '{input.bam} '
        
rule stringtie_gtf_list:
    input:
        expand(rules.stringtie.output, sample=SAMPLES)
    output:
        temp(join(ASSEMBLY_INTERIM, 'stringtie', 'assembled_gtfs.txt'))
    shell:
        'ls {input} > {output} '

def scallop_library():
    if LIBPREP['strand'] == 'reverse':
        arg = '--library_type first '
    elif LIBPREP['strand'] == 'forward':
        arg = '--library_type second '
    elif LIBPREP['strand'] == 'unstranded':
        arg = '--library_type unstranded '
    else:
        arg = '' #empty
    return arg

rule scallop:
    input:
        bam = get_sorted_bam
    output:
        gtf = join(ASSEMBLY_INTERIM, 'scallop', '{sample}', 'assembly.gtf')
    params:
        lib = scallop_library(),
        args = '--verbose 0 '
    singularity:
        'docker://' + config['docker']['scallop']
    shell:
        'scallop -i {input} -o {output} {params.lib} {params.args} '

rule scallop_gtf_list:
    input:
        expand(rules.scallop.output, sample=SAMPLES)
    output:
        join(ASSEMBLY_INTERIM, 'tmp', 'scallop_taco', 'assembled_gtfs.txt')
    shell:
        'ls {input} > {output} '


rule taco_merge:
    input:
        assembled_gtfs = join(ASSEMBLY_INTERIM, 'tmp', '{method}', 'assembled_gtfs.txt'),
        gtf = join(BASE_REF_DIR, 'genes', 'genes.gtf'),
        genome = join(BASE_REF_DIR, 'fasta', 'genome.fa')
    output:
        gtf = join(ASSEMBLY_INTERIM, '{method}', 'assembly.gtf')
    params:
        iso_fraction = 0.05,
        outdir = join(ASSEMBLY_INTERIM, '{method}'),
        expr_attr = '--gtf-expr-attr RPKM ' if  config['assembly']['transcriptome']['method'].startswith('scallop')
    threads:
        16
    singularity:
        'docker://' + config['docker']['taco']
    shell:
        'rm -rf {params.outdir} && '
        'taco_run '
        '-o {params.outdir} '
        '-p {threads} '
        '--ref-genome-fasta {input.genome} '
        '--isoform-frac {params.iso_fraction} '
        '--assemble-unstranded '
        '--filter-min-expr 1 '
        '--filter-splice-juncs '
        '{input.assembled_gtfs} '

rule taco_refcomp:
    input:
        gtf_ref = join(BASE_REF_DIR, 'genes', 'genes.gtf'),
        gtf = rules.taco_merge.output.gtf,
        genome = join(BASE_REF_DIR, 'fasta', 'genome.fa')
    params:
        species = TACO_ORG_MAP[config['organism']],
        outdir = join(ASSEMBLY_INTERIM, '{method}')
    output:
        gtf = join(ASSEMBLY_INTERIM, '{method}', 'assembly.refcomp.gtf'),
        meta = join(ASSEMBLY_INTERIM, '{method}', 'assembly.metadata.tsv')
    threads:
        16
    singularity:
        'docker://' + config['docker']['taco']
    shell:
        'taco_refcomp '
        '-r {input.gtf_ref} '
        '-t {input.gtf} '
        '-p {threads} '
        '-o {params.outdir} '
        '--cpat-species {params.species} '
        '--cpat-genome {input.genome} '
        '--cpat '
        
rule scallop_gffcompare:
    input:
        gtf = join(ASSEMBLY_INTERIM, 'scallop_taco', 'assembly.refcomp.gtf'),
        ref_gtf = join(BASE_REF_DIR, 'genes', 'genes.gtf')
    output:
        gtf = join(ASSEMBLY_INTERIM, 'scallop_taco', 'ref_assembly.annotated.gtf'),
        tmap = join(ASSEMBLY_INTERIM, 'scallop_taco', 'ref_assembly.assembly.gtf.tmap')
    params:
        prefix = join(ASSEMBLY_INTERIM, 'scallop_taco', 'ref_assembly')
    singularity:
        'docker://' + config['docker']['gffcompare']
    shell:
        'gffcompare -o {params.prefix} -r {input.ref_gtf} {input.gtf}'

rule scallop_uniq:
    input:
        gtf = join(ASSEMBLY_INTERIM, 'scallop_taco', 'assembly.refcomp.gtf'),
        ref_gtf = join(BASE_REF_DIR, 'genes', 'genes.gtf'),
        tmap = join(ASSEMBLY_INTERIM, 'scallop_taco', 'ref_assembly.assembly.gtf.tmap')
    output:
         join(ASSEMBLY_INTERIM, 'scallop_taco', 'unique.gtf')
    singularity:
        'docker://' + config['docker']['scallop']
    shell:
        'gtfcuff puniq {input.tmap} {input.gtf} {input.ref_gtf} {output} '

rule scallop_uniq_fasta:
    input:
        gtf = join(ASSEMBLY_INTERIM, 'scallop_taco', 'unique.gtf'),
        genome = join(BASE_REF_DIR, 'fasta', 'genome.fa')
    output:
        join(ASSEMBLY_INTERIM, 'scallop_taco', 'uniq_transcripts.fa')
    singularity:
        'docker://' + config['docker']['gffread']
    shell:
        'gffread {input.gtf} -g {input.genome} -w {output}'
        
rule scallop_transcriptome:
    input:
        ref = join(BASE_REF_DIR, 'fasta', 'gtf.gffread.transcripts.fa'),
        extra = join(ASSEMBLY_INTERIM, 'scallop_taco', 'uniq_transcripts.fa')
    output:
        join(ASSEMBLY_INTERIM, 'scallop_taco', 'fasta', 'transcriptome.fa')
    shell:
        'cat {input} > {output}'


rule psiclass:
    input:
        expand(join(ALIGN_INTERIM, ALIGNER, '{sample}.sorted.bam'), sample=SAMPLES)
    output:
        join(ASSEMBLY_INTERIM, 'psiclass', 'psiclass_sample_0.gtf')
    params:
        bam = lambda wildcards, input: ','.join(input) + ' ',
        prefix = join(ASSEMBLY_INTERIM, 'psiclass', 'psiclass')
    singularity:
        'docker://gcfntnu/psiclass:0.1'
    shell:
        'psiclass -b {params.bam} '
        '-o {params.prefix} '
