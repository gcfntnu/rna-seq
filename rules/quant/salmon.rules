#-*- mode: snakemake -*-
"""Snakemake rules for alignment free transcript and gene expression modelling using salmon.


Dependencies
------------
SALMON, https://combine-lab.github.io/salmon/

Install:
conda install salmon

"""

from os.path import join

extra_conf_fn = srcdir('salmon.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)
        
SALMON_INTERIM = join(QUANT_INTERIM, 'salmon')
SALMON_OUT = join(QUANT_PROCESSED, 'salmon')

if not 'REF_DIR' in locals():
   raise ValueError

## config params
read_orientation = LIBPREP.get('strand')
if read_orientation is None:
    LIB_TYPE = 'A'
else:
    read_orientation = read_orientation.lower()
    PE = len(config['read_geometry']) > 1
    stranded = 'U' if read_orientation == 'both' else 'S'
    orientation = 'R'
    LIB_TYPE = 'I' + stranded + orientation if PE else stranded + orientation


def get_fragment_length(wildcards):
    val = config['samples'][wildcards.sample].get('Fragment_Length', 180)
    if val == 'NA':
        val = 180
    return val
    
def get_fragment_sd(wildcards):
    val = config['samples'][wildcards.sample].get('Fragment_SD', 20)
    if val == 'NA':
        val = 20
    if int(val) < 20:
        val = 20
    return val
    
def sample_args(wildcards):
    """Sample specific args.
    """
    args = ''
    sample = config['samples'][wildcards.sample]
    PE = sample.get('paired_end') or len(config['read_geometry']) > 1
    fastq = get_processed_fastq(wildcards)
    salmon_r1 = ' '.join(fastq['R1'])
    if PE:
        salmon_r2 = ' '.join(fastq['R2'])
        args += ' -1 {} -2 {} '.format(salmon_r1, salmon_r2)
        args += '--gcBias '
    else:
        args += ' -r {} '.format(salmon_r1)
        args += '--fldMean {} '.format(get_fragment_length(wildcards))
        args += '--fldSD {} '.format(get_fragment_sd(wildcards))
    return args

rule salmon_transcriptome_index:
    input:
        transcriptome = join(REF_DIR, 'fasta', 'transcriptome.fa')
    params:
        args = '--perfectHash -k 31 --keepDuplicates',
        index_dir = join(REF_DIR, 'salmon')
    output:
        join(REF_DIR, 'salmon', 'refInfo.json')
    threads:
        24
    singularity:
        'docker://combinelab/salmon:0.13.1'
    shell:
        'salmon index '
        '{params.args} '
        '-i {params.index_dir} '
        '--transcripts  {input.transcriptome} '
        '--threads {threads} '

rule salmon_map:
    input:
        unpack(get_processed_fastq),
        index = join(REF_DIR, 'salmon', 'refInfo.json'),
        gtf = join(REF_DIR, 'genes', 'genes.gtf')
    params:
        output = join(SALMON_INTERIM, '{sample}'),
        nboot = 30,
        lib_type = LIB_TYPE,
        index = rules.salmon_transcriptome_index.params.index_dir,
        sample_args = sample_args
    threads:
        24
    singularity:
        'docker://combinelab/salmon:0.13.1'
    output:
        quant = join(SALMON_INTERIM, '{sample}', 'quant.sf'),
        unmapped = join(SALMON_INTERIM, '{sample}', 'unmapped.sam'),
        meta_log = join(SALMON_INTERIM, '{sample}', 'aux_info', 'meta_info.json'),
        dist_log = join(SALMON_INTERIM, '{sample}', 'libParams', 'flenDist.txt')
    shell:
        'salmon quant '
        '-i {params.index} '
        '-l {params.lib_type} '
        '-g {input.gtf} '
        '-p {threads} '
        '--numBootstraps {params.nboot} '
        '--validateMappings '
        '--rangeFactorizationBins 4 '
        '--seqBias '
        '--writeUnmappedNames '
        '--writeMappings={output.unmapped} '
        '-o {params.output} '
        '{params.sample_args} '
        
def unmapped_sample_args(wildcards):
    """Sample specific args for unmapped reads.
    """
    args = ''
    sample = config['samples'][wildcards.sample]
    PE = sample.get('paired_end') or len(config['read_geometry']) > 1
    fastq = get_processed_fastq(wildcards)
    salmon_r1 = ' '.join(fastq['R1'])
    if PE:
        salmon_r2 = ' '.join(fastq['R2'])
        args += ' -1 {} -2 {} '.format(salmon_r1, salmon_r2)
    else:
        args += ' -r {} '.format(salmon_r1)
    return args

rule salmon_unmapped_fastq:
    input:
        unpack(get_processed_fastq),
        unmapped = join(SALMON_INTERIM, '{sample}', 'unmapped.sam')
    params:
        args = unmapped_sample_args,
        prefix = join(SALMON_INTERIM, '{sample}', 'unmapped')
    singularity:
        'docker://flatberg/salmon:0.14'
    output:
        join(SALMON_INTERIM, '{sample}', 'unmapped_1.fa.gz')
    shell:
        'salmontools extract-unmapped '
        '{params.args} '
        '-o {params.prefix} '
        
rule salmon_quant:
    input:
        files = expand(rules.salmon_map.output.quant, sample=SAMPLES),
        txinfo = join(REF_DIR, 'genes', 'transcripts.tsv'),
        ginfo = join(REF_DIR, 'genes', 'genes.tsv')
    params:
        output = SALMON_OUT,
        script = srcdir('scripts/transcript_quant.R')
    output:
        gene_counts = join(SALMON_OUT, 'genes.quant'),
        gene_tpm = join(SALMON_OUT, 'genes.tpm'),
        gene_info = join(SALMON_OUT, 'gene_info.tsv'),
        gene_length = join(SALMON_OUT, 'genes.length'),
        transcript_counts = join(SALMON_OUT, 'transcripts.quant'),
        transcript_tpm = join(SALMON_OUT, 'transcripts.tpm'),
        transcript_info = join(SALMON_OUT, 'transcript_info.tsv'),
        transcript_length = join(SALMON_OUT, 'transcripts.length')
    shell:
        'Rscript {params.script} '
        '--type salmon '
        '--output-length-scaled-tpm '
        '--output-genelength '
        '--output-transcripts '
        '--txinfo {input.txinfo} '
        '--ginfo {input.ginfo} '
        '-o {params.output} '
        ' {input.files} '
