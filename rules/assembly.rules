#-*- mode:snakemake -*-
extra_conf_fn = srcdir('assembly.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

ASSEMBLY_INTERIM = join(INTERIM_DIR, 'rnaseq', 'assembly')

if not 'GCFDB_DIR' in locals():
    GCFDB_DIR = environ.get('GCF_DB') or config.get('gcfdb_dir', '../../gcfdb')

include:
    join(GCFDB_DIR, 'reference_db.db')
include:
   join(GCFDB_DIR,  'spikein.db')
include:
    join(GCFDB_DIR, 'contaminants.db')
include:
    join(GCFDB_DIR, 'rrna.db')

include:
    'align.rules'
include:
    'assembly/genome.rules'
include:
    'assembly/transcriptome.rules'


if config['assembly']['transcriptome']['method'] != 'skip':
    REF_DIR = ASSEMBLY_INTERIM

def get_tx_assembly(*args):
    assembly_method = config['assembly']['transcriptome'].get('method', 'skip')
    
    if assembly_method == 'scallop_taco' or assembly_method == 'default':
        gtf = join(ASSEMBLY_INTERIM, 'scallop', 'genes', 'ref_assembly.annotated.gtf')
        fasta = join(ASSEMBLY_INTERIM, 'scallop', 'fasta', 'transcriptome.fa')
    elif assembly_method == 'stringtie_taco':
        gtf = join(ASSEMBLY_INTERIM, 'taco', 'genes', 'assembly.refcomp.gtf'),
        fasta = join(ASSEMBLY_INTERIM, 'taco', 'fasta', 'transcriptome.fa')
    elif assembly_method == 'stringtie':
        gtf = join(ASSEMBLY_INTERIM, 'taco', 'genes', 'assembly.refcomp.gtf'),
        fasta = join(ASSEMBLY_INTERIM, 'taco', 'fasta', 'transcriptome.fa')
    elif assembly_method == 'psiclass':
        gtf = join(ASSEMBLY_INTERIM, 'psiclass', 'genes', 'assembly.refcomp.gtf'),
        fasta = join(ASSEMBLY_INTERIM, 'psiclass', 'fasta', 'transcriptome.fa')
    else:
        gtf = join(BASE_REF_DIR, 'genes', 'genes.gtf')
        fasta = join(BASE_REF_DIR, 'fasta', 'gtf.rsem.transcripts.fa')
    return {'gtf': gtf, 'fasta': fasta}

rule assembled_transcriptome:
    input:
        unpack(get_tx_assembly)
    output:
        gtf = join(REF_DIR, 'genes', 'genes.gtf'),
        fasta = join(REF_DIR, 'fasta', 'transcriptome.fa')
    shell:
        """
        ln -sr {input.gtf} {output.gtf} 
        ln -sr {input.fasta} {output.fasta} 
        """

def get_genome_assembly(*args):
    assembly_method = config['assembly']['genome'].get('method', 'skip')
    if not assembly_method == 'skip':
        raise NotImplementedError
    
    return {'genome': join(BASE_REF_DIR, 'fasta', 'genome.fa'),
            'genome_index': join(BASE_REF_DIR, 'fasta', 'genome.fa.fai'),
            'index': directory(join(BASE_REF_DIR, 'index'))}

rule assembled_genome:
    input:
        unpack(get_genome_assembly)
    output:
        genome = join(REF_DIR, 'fasta', 'genome.fa'),
        genome_index = directory(join(REF_DIR, 'fasta', 'genome.fa.fai')),
        index = directory(join(REF_DIR, 'index'))
    shell:
        """
        ln -sr {input.genome} {output.genome}
        ln -sr {input.genome_index} {output.genome_index}
        ln -sr {input.index}/genome* {output.index}/index
        """
