#-*- mode: snakemake -*-
"""Workflow for guided transcriptome assembly. "Guided" means that we
have a reference genome and annotations

Main steps
----------
1.) Spliced alignment to genome (star-twopass)
2.) Transcript assemble with stringtie
3.) Merge assemblies across samples with taco

The rules from star.rules is pretty much copied over and prefixed with ta_
The output will be an updated gtf file.

"""

import os
from os.path import join
import snakemake
SCRIPT_DIR = snakemake.workflow.srcdir('scripts')

configfile:
    'transcript_assembly_config.yaml'

SAMPLES = sorted(list(config['samples'].keys()))


include:
    join(SNAKERULES, 'filter.rules')
include:
    join(SNAKERULES, 'alignment', 'star.rules')

rule ta_star_firstpass:
    input:
        genome = star_index,
        fastq = get_fastq,
        gtf = config['genome']['gtf']
    params:
        prefix = join(config['scratch_dir'], '{sample}.ta.firstpass.'),
        read_length = int(config.get('read_length', 75)) - 1,
        fastq = star_input_params
    output:
        sj = temp(join(config['scratch_dir'], '{sample}.ta.firstpass.SJ.out.tab'))
    threads:
        16
    log:
        'logs/{sample}.ta.1pass.Log.final.out'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {input.genome} '
        '--genomeLoad LoadAndKeep '
        '--outFilterMatchNminOverLread 0.05 '
        '--readFilesCommand zcat '
        '--outSAMtype None '
        '--sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {params.fastq} '
        '&& mv {params.prefix}' + 'Log.final.out  {log}'

rule ta_clean_sharedmem_1pass:
    params:
        rules.ta_star_firstpass.input.genome
    output:
        touch('.star.mem.1pass.cleaned')
    shell:
        'STAR '
        '--genomeDir {params} '
        '--genomeLoad Remove '
        '--outFileNamePrefix /tmp/foo '
        '|| echo "NO SHARED MEM" '
        
rule ta_cat_junctions:
    input:
        junctions = expand(join(config['scratch_dir'], '{sample}.ta.firstpass.SJ.out.tab'), sample=SAMPLES)
    output:
        temp(join(config['scratch_dir'], 'SJ.ta.out.firstpass.tab'))
    message:
        """
        Prepare junctions for updated genome. Insert strandedness and remove mitochondrial- and  non-canonical-junctions if they are supported by less than 3 reads.
        """
    shell:
        """
        grep -v ^MT <(cat {input.junctions}) > /tmp/SJ.out
        awk 'BEGIN {{OFS=\"\\t\"; strChar[0]="."; strChar[1]="+"; strChar[2]="-";}} {{if($5>0 && $7>3){{print $1,$2,$3,strChar[$4]}}}}' /tmp/SJ.out > {output}
        """

rule ta_new_genome_index:
    input: 
        genome = config['genome']['fasta'],
        gtf = config['genome']['gtf'],
        junctions = rules.ta_cat_junctions.output,
        clean_mem = rules.ta_clean_sharedmem_1pass.output
    output:
        temp(join(config['scratch_dir'], 'genome', 'SA'))
    params: 
        new_genome = join(config['scratch_dir'], 'genome'),
        read_length = rules.ta_star_firstpass.params.read_length
    threads:
        16
    benchmark:
        'timings/build.2pass.genome.time'
    shell:
        'STAR '
        '--runThreadN {threads} '
        '--runMode genomeGenerate '
        '--genomeDir {params.new_genome} '
        '--genomeFastaFiles {input.genome} '
        '--sjdbGTFfile {input.gtf} '
        '--sjdbFileChrStartEnd {input.junctions} '
        '--sjdbOverhang {params.read_length} '

rule ta_2pass_star:
    input:
        genome = rules.ta_new_genome_index.output if config['twopass'] else star_index,
        fastq = get_fastq,
        gtf = config['genome']['gtf']
    params: 
        prefix = join(config['tmp_dir'], '{sample}.ta.'),
        read_length = int(config.get('read_length', 75)) - 1,
        genome = rules.ta_new_genome_index.params.new_genome if config['twopass'] else star_index,
        fastq = star_input_params
    output:
        bam = temp(join(config['tmp_dir'], '{sample}.ta.Aligned.sortedByCoord.out.bam'))
    threads:
        16
    log:
        'logs/{sample}.Log.final.out'
    benchmark:
        'timings/{sample}.star.2pass.time'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {params.genome} '
        '--genomeLoad LoadAndKeep '
        '--readFilesCommand zcat '
        '--limitBAMsortRAM 20000000000 ' 
        '--outSAMtype BAM SortedByCoordinate '
        '--outFilterType BySJout '
        '--outFilterMismatchNmax 10 '
        '--outMultimapperOrder Random '
        '--outSAMmultNmax 20 '
        '--outSAMstrandField intronMotif '
        '--sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.prefix} '
        '--outSAMattrIHstart 0 '
        '--readFilesIn {params.fastq} '
        '&& mv {params.prefix}Log.final.out {log} '
        

rule stringtie:
    input:
        gtf = config['genome']['gtf'],
        bam = rules.ta_2pass_star.output.bam
    output:
        gtf = join(config['scratch_dir'], '{sample}.assembled.gtf')
    params:
        lib_type = '--rf' if config['read_orientation'] == 'rf' else '--fr' if config['read_orientation'] == 'fr' else ''
    threads:
        8
    shell:
        'stringtie '
        '-p {threads} '
        '-G {input.gtf} '
        '-l {wildcards.sample} '
        '-o {output} '
        '{params.lib_type} '
        '{input.bam} '

rule strawberry:
     input:
        gtf = config['genome']['gtf'],
        bam = rules.ta_2pass_star.output.bam
    output:
        gtf = join(config['scratch_dir'], '{sample}', 'assembled_transcripts.gtf')
    params:
        output = join(config['scratch_dir'], '{sample}')
    threads:
        8
    shell:
        'strawberry '
        '-p {threads} '
        '-g {input.gtf} '
        '-o {params.output} '
        '{input.bam} '

rule gtf_list:
    input:
        expand(rules.stringtie.output, sample=SAMPLES)
    output:
        join(config['scratch_dir'], 'assembled_gtfs.txt')
    shell:
        'ls {input} > {output} '

rule taco_merge:
    input:
        assembled_gtfs = rules.gtf_list.output,
        gtf = config['genome']['gtf'],
        genome = config['genome']['fasta']
    output:
        gtf = join(config['tmp_dir'], 'assembly.gtf')
    params:
        iso_fraction = 0.05,
        output = join(config['scratch_dir'], 'taco_merged')
    threads:
        16       
    shell:
        'taco_run '
        '-o {params.output} '
        '-p {threads} '
        '--ref-genome-fasta {input.genome} '
        '--isoform-frac {params.iso_fraction} '
        '--assemble-unstranded '
        '--filter-min-expr 1 '
        '--filter-splice-juncs '
        '{input.assembled_gtfs} '
        '&& '
        'cp {params.output}/assembly.gtf {output}'

rule taco_refcomp:
    input:
        gtf_ref = config['genome']['gtf'],
        gtf = rules.taco_merge.output.gtf,
        genome = config['genome']['fasta']
    params:
        species = 'human',
        output = join(config['scratch_dir'], 'taco_refcomp')
    output:
        gtf = join(config['scratch_dir'], 'taco_refcomp', 'assembly.refcomp.gtf'),
        meta = join(config['scratch_dir'], 'taco_refcomp', 'assembly.metadata.tsv')
    threads:
        16
    shell:
        'mkdir -p {params.output} '
        '&& '
        'taco_refcomp '
        '-r {input.gtf_ref} '
        '-t {input.gtf} '
        '-p {threads} '
        '-o {params.output} '
        '--cpat-species {params.species} '
        '--cpat-genome {input.genome} '
        '--cpat '


rule ta_transcriptome:
    input:
        gtf = rules.taco_merge.output.gtf,
        genome = config['genome']['fasta']
    output:
        'data/assembly_cdna.fa'
    shell:
        'gtf_to_fasta {input.gtf} {input.genome} {output} '
