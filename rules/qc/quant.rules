#-*- mode: snakemake -*-
"""RSeQC: An RNA-seq Quality Control Package

http://rseqc.sourceforge.net/

"""

RSEQC_DIR = join(QC_INTERIM, 'rseqc')
from os.path import basename

rule qc_bam_rseqc_read_distribution:
    input:
        bam = get_sorted_bam,
        bed = join(REF_DIR, 'genes', 'genes.bed12')
    output:
        join(RSEQC_DIR, '{sample}.readdist.txt')
    log:
       'logs/{sample}/{sample}.readdist.txt'
    singularity:
        'docker://' + config['docker']['rseqc']
    shell:
        """
        read_distribution.py  -i {input.bam} -r {input.bed} > {output}
        cp {output} {log}
        """

rule qc_bam_rseqc_junction_annotation:
    input:
        bam = get_sorted_bam,
        bed = join(REF_DIR, 'genes', 'genes.bed12')
    params:
        prefix = join(RSEQC_DIR, '{sample}')
    output:
        join(RSEQC_DIR, '{sample}.junction.xls')
    log:
        'logs/{sample}/{sample}.junction.xls'
    singularity:
        'docker://' + config['docker']['rseqc']
    shell:
        """
        junction_annotation.py  -i {input.bam} -r {input.bed} -o {params.prefix}
        cp {output} {log}
        """
        
rule qc_bam_rseqc_junction_saturation:
    input:
        bam = get_sorted_bam,
        bed = join(REF_DIR, 'genes', 'genes.bed12')
    params:
        prefix = join(RSEQC_DIR, '{sample}')
    output:
        join(RSEQC_DIR,  '{sample}.junctionSaturation_plot.r')
    log:
        'logs/{sample}/{sample}.junctionSaturation_plot.r'
    singularity:
        'docker://' + config['docker']['rseqc']
    shell:
        """
        junction_saturation.py  -i {input.bam} -r {input.bed} -o {params.prefix}
        cp {output} {log}
        """

rule qc_bam_rseqc_inner_distance:
    input:
        bam = get_sorted_bam,
        bed = join(REF_DIR, 'genes', 'genes.bed12')
    params:
        prefix = join(RSEQC_DIR, '{sample}')
    output:
        join(RSEQC_DIR, '{sample}', '{sample}.inner_distance.txt')
    log:
        'logs/{sample}/{sample}.inner_distance.txt'
    singularity:
        'docker://' + config['docker']['rseqc']
    shell:
        """
        inner_distance.py -i {input.bam} -r {input.bed} -o {params.prefix}
        cp {output} {log}
        """

rule qc_bam_rseqc_tin:
    input:
        bam = get_sorted_bam,
        bed = join(REF_DIR, 'genes', 'genes.bed12')
    singularity:
        'docker://' + config['docker']['rseqc']
    output:
        tin = join(RSEQC_DIR, '{sample}.tin.xls'),
        summary = join(RSEQC_DIR, '{sample}.summary.txt')
    params:
        tin = lambda wildcards, input: basename(input.bam).replace('.bam', '') + '.tin.xls',
        summary = lambda wildcards, input: basename(input.bam).replace('.bam', '') + '.summary.txt'
    log:
        tin = 'logs/{sample}/{sample}.tin.xls',
        summary = 'logs/{sample}/{sample}.summary.txt'
    shell:
        """
        tin.py -i {input.bam} -r {input.bed} 
        mv {params.tin} {output.tin}
        mv {params.summary} {output.summary}
        cp {output.tin} {log.tin}
        cp {output.summary} {log.summary}
        """
