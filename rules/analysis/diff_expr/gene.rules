#-*- mode: snakemake -*-
"""
Snakemake rules for transcript differential expression


limma-voom as default

Sleuth for situations where bootstraped transcript estimation exists (kallisto, salmon)

SAMseq if many replicates in two-factor experiments.

High precision : star - ballgown
High recall : salmon - (edger, deseq2, limma-voom)

Dependencies
------------
 

"""
import yaml


# load analysis config
import snakemake
from snakemake.workflow import srcdir
model_fn = srcdir('gene_diffexp_config.yaml')
model = yaml.load(open(model_fn))

rule gene_voom:
    input:
        counts = get_genecounts,
        sample_info = 'data/processed/sample_info.tsv',
        gene_info = get_geneinfo
    params:
        prefix = 'models/voom.gene',
        condition = model.get('condition', 'condition'),
        ref_level = model['ref_level'],
        filter = model.get('filter_low_expression', True),
        test = 'ALLvsREF',
        script = srcdir('scripts/gene_diffexp.R')
    shell:
        'Rscript {params.script} '
        '{input.counts} '
        '--sample-info {input.sample_info} '
        '--gene-info {input.gene_info} '
        '--condition {params.condition} '
        '--reference-level {params.ref_level} '
        '--output {params.prefix} '
        '--save-workspace '
        

rule gene_deseq2:
    input:
        counts = get_genecounts,
        sample_info = 'data/processed/sample_info.tsv',
        gene_info = get_geneinfo
    params:
        prefix = 'models/deseq2.gene',
        condition = model.get('condition', 'condition'),
        ref_level = model['ref_level'],
        filter = model.get('filter_low_expression', True),
        test = 'ALLvsREF',
        script = srcdir('scripts/gene_diffexp.R')
    shell:
        'Rscript {params.script} '
        '{input.counts} '
        '--sample-info {input.sample_info} '
        '--gene-info {input.gene_info} '
        '--condition {params.condition} '
        '--reference-level {params.ref_level} '
        '--output {params.prefix} '
        '--save-workspace '

rule sleuth_gene:
    input:
        get_genecounts 

rule samseq_gene:
    input:
        get_genecounts     
