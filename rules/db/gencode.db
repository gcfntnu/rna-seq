#-*-mode:snakemake-*-
"""Gencode external data and reference/index builds

Gencode is for human/mouse/rat only.

www.gencodegenes.org

"""
import os
import string

# config
extra_conf_fn = srcdir('gencode.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

GC_ORG_MAP = {'homo_sapiens':  'human',
              'mus_musculus': 'mouse',
              'rattus_norwegicus': 'rat'}

ORG = config.get('organism', 'homo_sapiens')
GENCODE_ORG = GC_ORG_MAP.get(ORG, '')
DB_CONF = config['db']['gencode']
GENCODE_RELEASE = DB_CONF.get('release', 27)
GENCODE_VERSION = DB_CONF.get('gencode_version', 'GRCh38')
TRANSCRIPTOME_TYPE = DB_CONF.get('transcriptome_type', '') #['pc_','all']
PROTOCOL = DB_CONF.get('protocol', 'http')
ERCC = DB_CONF.get('add_ercc', False)
REF_DIR = join(EXT_DIR, '', 'gencode')

# includes
if ERCC:
    include:
        'ercc.db'

# GENCODE URLS

GENOME = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/{}.primary_assembly.genome.fa.gz'
GENOME = GENOME.format(PROTOCOL, GENCODE_ORG, GENCODE_RELEASE, GENCODE_VERSION)
GTF = '{}://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/gencode.v{}.primary_assembly.annotation.gtf.gz'
GTF = GTF.format(PROTOCOL, GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
    
GENCODE_TRANSCRIPTOME = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:}/gencode.v{:}.{}transcripts.fa.gz'
GENCODE_TRANSCRIPTOME = GENCODE_TRANSCRIPTOME.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE, TRANSCRIPTOME_TYPE)
GENCODE_LNC = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{}/gencode.v{}.lncRNA_transcripts.fa.gz'
GENCODE_LNC = GENCODE_LNC.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)

GENCODE_LNC_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:}/gencode.v{:}.long_noncoding_RNAs.gtf.gz'
GENCODE_LNC_GTF = GENCODE_LNC_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
GENCODE_PREDTRNA_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:}/gencode.v{:}.tRNAs.gtf.gz'
GENCODE_PREDTRNA_GTF = GENCODE_PREDTRNA_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)
GENCODE_POLYA_GTF = 'ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_{}/release_{:}/gencode.v{:}.polyAs.gtf.gz'
GENCODE_POLYA_GTF = GENCODE_POLYA_GTF.format(GENCODE_ORG, GENCODE_RELEASE, GENCODE_RELEASE)

rule gencode_dna:
    output:
        join(REF_DIR, GENOME.split('/')[-1].split('.gz')[0])
    params: 
        url = GENOME
    threads: 
        32
    log:
        'logs/gencode.genome.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'
        
rule gencode_cdna:
    params: 
        url = GENCODE_TRANSCRIPTOME
    output:
        join(REF_DIR, GENCODE_TRANSCRIPTOME.split('/')[-1].split('.gz')[0])
    threads: 
        32
    log:
        'logs/gencode.cdna.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'


rule gencode_noncoding:
    params:
        url = GENCODE_LNC
    output:
        join(REF_DIR, GENCODE_LNC.split('/')[-1].split('.gz')[0])
    threads:
        32
    log:
        'logs/gencode.noncoding.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule gencode_gtf:
    params: 
        url = GTF
    output: 
        join(REF_DIR, GTF.split('/')[-1].split('.gz')[0])    
    threads:
        32
    log:
        'logs/gencode.gtf.log'
    shell: 
        'wget -O - {params.url} -o {log} | gunzip -c > {output}'

rule gencode_add_ercc2genome:
    input:
        rules.gencode_dna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.gencode_dna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2cdna:
    input:
        rules.gencode_cdna.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.gencode_cdna.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2noncoding:
    input:
        rules.gencode_noncoding.output,
        rules.ercc_files.output.ercc_fasta
    output:
        rules.gencode_noncoding.output[0].split('.fa')[0] + '.ERCC92.fa'
    shell:
        'cat {input} > {output}'

rule gencode_add_ercc2gtf:
    input:
        rules.gencode_gtf.output,
        rules.ercc_gtf.output
    output:
        rules.gencode_gtf.output[0].split('.gtf')[0] + '.ERCC92.gtf'
    shell:
        'cat {input} > {output}'

rule gencode_db_downloads:
    input:
        genome = rules.gencode_add_ercc2genome.output if ERCC else rules.gencode_dna.output,
        cdna = rules.gencode_add_ercc2cdna.output if ERCC else rules.gencode_cdna.output,
        noncoding = rules.gencode_noncoding.output,
        gtf = rules.gencode_add_ercc2gtf.output if ERCC else rules.gencode_gtf.output,
    output:
        genome = join(REF_DIR, 'fasta', 'genome.fa'),
        cdna = join(REF_DIR, 'fasta', 'cdna.fa'),
        gtf = join(REF_DIR, 'genes', 'genes.gtf'),
        noncoding = join(REF_DIR, 'fasta', 'ncdna.fa')
    shell:
        """
        ln -s {input.genome} {output.genome}
        ln -s {input.cdna} {output.cdna}
        ln -s {input.gtf} {output.gtf}
        ln -s {input.noncoding} {output.noncoding}
        """

rule gencode_gtf2gene:
    input:
        rules.gencode_db_downloads.output.gtf
    params:
        script = srcdir('scripts/gtf2genes.py')
    output:
        join(REF_DIR, 'genes', 'genes.csv')
    shell:
        'python {params.script} {input} > {output}'
        
rule gencode_gtf2tx:
    input:
        rules.gencode_db_downloads.output.gtf
    params:
        script = srcdir('scripts/gtf2tx.py')
    output:
        join(REF_DIR, 'genes', 'transcripts.csv')
    shell:
        'python {params.script} {input} > {output}'    

rule gencode_tx2gene:
    input:
        rules.gencode_gtf2gene.output
    output:
        join(REF_DIR, 'genes', 'tx2gene.txt')
    shell:
        'cut -f1,10 {input} > {output}'
        
