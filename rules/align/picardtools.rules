#-*- mode: snakemake -*-

"""
Picard tools, https://broadinstitute.github.io/picard/

"""

def optical_dup_args(*args, **kw):
    args = 'TAGGING_POLICY=All '
    machine = config.get('machine', 'nextseq500')
    if machine == 'nextseq500':
        args += 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=100 '
    else:
        args += 'OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 '
    if config.get('remove_optical_duplicates'):
        args += 'REMOVE_SEQUENCING_DUPLICATES=TRUE '
    return args

rule picard_mark_duplicates:
    input:
        bam = rules.star_align.output.bam,
        shared_mem = rules.star_clean_memory.output        
    output:
        bam = join(ALIGN_INTERIM, 'star', '{sample}.sorted.bam'),
        bai = join(ALIGN_INTERIM, 'star', '{sample}.sorted.bai'),
        metrics = 'logs/{sample}/{sample}.rmdup.metrics'
    log:
        'logs/{sample}/{sample}.picard.rmdup.log'
    params:
        java_opt="-Xms2g -Xmx32g -XX:MaxPermSize=2g",
        dup_args = optical_dup_args()
    threads:
        2
    singularity:
        'docker://gcfntnu/picard:2.18'
    shell:
        'picard MarkDuplicates '
        'INPUT={input.bam} '
        'OUTPUT={output.bam} '
        'METRICS_FILE={output.metrics} '
        'VALIDATION_STRINGENCY=SILENT '
        'MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 '
        'CREATE_INDEX=TRUE '
        'CREATE_MD5_FILE=TRUE '
        '{params.dup_args}'
        '2> {log} '
        
