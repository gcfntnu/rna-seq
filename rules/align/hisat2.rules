#-*- mode: snakemake -*-
"""

Snakemake rules for aligning rna-seq fastq files to genome using the
HISAT2 aligner.
"""

import os
from os.path import join

extra_conf_fn = srcdir('hisat2.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

HISAT_INTERIM = join(ALIGN_INTERIM, 'hisat2')
HISAT_PROCESSED = join(ALIGN_PROCESSED, 'hisat2')

def hisat2_input(wildcards):
    fastq = get_processed_fastq(wildcards)
    PE = sample.get('paired_end') or len(config['read_geometry']) > 1
    R1 = fastq['R1']
    input = '-1 ' + ','.join(R1)
    if paired_end:
        R2 = fastq.get('R2', [])
        input += ' -2 ' + ','.join(R2)
    return input

rule hisat2_index:
    input:
        genome = join(REF_DIR, 'fasta', 'genome.fa')
    params:
        index_dir =  join(REF_DIR, 'hisat2'),
        prefix = join(REF_DIR, 'hisat2', 'hisat2')
    output:
         join(REF_DIR, 'hisat2', 'hisat2.1.ht2')
    threads:
        24
    log:
        join(REF_DIR, 'logs', 'HISAT2.index.log')
    singularity:
        'docker://gcfntnu/ensembl:0.1' 
    shell:
        'hisat2-build '
        '-f '
        '-p {threads} '
        '{input.genome} '
        '{params.prefix} '
    
rule hisat2_align:
    input:
        unpack(get_processed_fastq),
        index = rules.hisat2_index.output
    params:
        input = hisat2_input,
        index = rules.hisat2_index.params.prefix,
        unaligned = join(HISAT_INTERIM, '{sample}.unaligned.fastq.gz')
    output:
        sam = temp(join(HISAT_INTERIM, '{sample}.out.sam')) 
    threads:
        16
    shell:
        'hisat2 '
        '-p {threads} '
        '--un-conc-gz {params.unaligned} '
        '-x {params.index} '
        '{params.input} '
        '-S {output.sam}'

rule hisat2_bam:
    input:
        sam = rules.hisat2_align.output.sam
    output:
        bam = temp(join(ALIGN_INTERIM, 'hisat2', '{sample}.Aligned.sortedByCoord.out.bam'))
    threads:
        4
    shell:
         'sambamba view -S -f bam {input.sam} | sambamba sort -t {threads} -o {output.bam} /dev/stdin '
