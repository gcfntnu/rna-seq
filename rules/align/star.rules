#-*- mode: snakemake -*-
"""

Snakemake rules for aligning rna-seq fastq files to genome using the
STAR aligner.

This is a single pass alignment with known reference and gene model. The
output is coordinate sorted bam files with marked duplicates and the
companion index (.bai) file.


Dependencies
------------
STAR, https://github.com/alexdobin/STAR
SAMBAMBA,

"""

import os
from os.path import join

extra_conf_fn = srcdir('star.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

STAR_INTERIM = join(ALIGN_INTERIM, 'star')
STAR_PROCESSED = join(ALIGN_PROCESSED, 'star')
REF = config['align']['reference']

def star_input_params(wildcards):
    """Multiple fastq files per sample workaround.

    STAR uses comma separated input when defining a read with mutiple fastq files.
    A comma separated string is not a valid input file in snakemake.
    A work around in snakemake is to build the comma separated input string as a params.fastq
    
    """
    R1 = get_processed_fastq_R1(wildcards)
    if config['samples'][wildcards.sample]['paired_end']: 
        R2 = get_processed_fastq_R2(wildcards)
    else:
        R2 = []
    R1 = ','.join(sorted(set(R1)))
    R2 = ','.join(sorted(set(R2)))
    input_string = ' '.join([R1, R2])
    return input_string

rule star_genome_index:
    input: 
        genome = join(ENSEMBL_EXT, 'fasta', 'genome.fa'),
        gtf = join(ENSEMBL_EXT, 'genes', 'genes.gtf')
    output:
         join(ENSEMBL_EXT, 'star', 'SA')
    params:
        index_dir =  join(ENSEMBL_EXT, 'star'),
        readlength = '100'
    threads:
        24
    log:
        join(ENSEMBL_EXT, 'logs', 'STAR.index.log')
    singularity:
        'docker://gcfntnu/ensembl:0.1' 
    shell:
        'STAR '
        '--runThreadN {threads} '
        '--runMode genomeGenerate '
        '--genomeDir {params.index_dir} '
        '--genomeFastaFiles {input.genome} '
        '--sjdbGTFfile {input.gtf} '
        '--sjdbOverhang {params.readlength} '
        '&& mv Log.out {log}'

rule star_firstpass0:
    input:
        genome = join(ENSEMBL_EXT, 'star', 'SA'),
        R1 = get_processed_fastq_R1
    params:
        prefix = join(STAR_INTERIM, '{sample}.'),
        fastq = star_input_params,
        genome_dir = join(ENSEMBL_EXT, 'star')
    output:
        bam = join(STAR_INTERIM, '{sample}.Aligned.sortedByCoord.out.bam')
    threads:
        48
    log:
        'logs/{sample}.1pass.Log.final.out'
    conda:
        'envs/align.yaml'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {params.genome_dir} '
        '--twopassMode Basic ' 
        '--readFilesCommand zcat '
        '--limitBAMsortRAM 25000000000 '
        '--outFilterType BySJout '
        '--outMultimapperOrder Random '
        '--outReadsUnmapped Fastx '
        '--outSAMtype BAM SortedByCoordinate '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {params.fastq} '
        '&& mv {params.prefix}Log.final.out {log} '

rule star_firstpass:
    input:
        genome = join(ENSEMBL_EXT, 'star', 'SA'),
        fastq = get_processed_fastq_R1
    params:
        prefix = lambda wildcards, output: output[0].split('firstpass.SJ.out.tab')[0],
        read_length = index_read_length(),
        fastq = star_input_params,
        genome_dir = os.path.dirname(genome(_index))
    output:
        sj = temp(join(STAR_INTERIM, '{sample}.firstpass.SJ.out.tab'))
    threads:
        48
    log:
        'logs/{sample}.1pass.Log.final.out'
    conda:
        'envs/align.yaml'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {params.genome_dir} '
        '--genomeLoad LoadAndKeep ' 
        '--readFilesCommand zcat '
        '--outSAMtype None '
        '--sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {params.fastq} '
        '&& mv {params.prefix}Log.final.out {log} '
        
rule clean_sharedmem_1pass:
    params:
        rules.star_firstpass.params.genome_dir
    output:
        temp(touch('.star.mem.1pass.cleaned'))
    conda:
        'envs/align.yaml'            
    shell:
        'STAR '
        '--genomeDir {params} '
        '--genomeLoad Remove '
        '--outFileNamePrefix /tmp/foo '
        '|| echo "NO SHARED MEM" '
        
rule collect_1pass_junctions:
    input:
        junctions = expand(join(STAR_INTERIM, '{sample}.firstpass.SJ.out.tab'), sample=SAMPLES)
    params:
        script = srcdir('scripts/sjCollapseSamples.awk')
    output:
        temp(join(STAR_INTERIM, 'SJ.out.firstpass.tab'))
    shell:
        """
        awk -f {params.script} {input.junctions} | sort -k1,1V -k2,2n -k3,3n > {output}
        """

rule filter_1pass_junctions:
    input:
        sj = rules.collect_1pass_junctions.output,
        mem = rules.clean_sharedmem_1pass.output
    params:
        script = srcdir('scripts/filter_junctions.py')
    output:
        join(STAR_INTERIM, 'SJ.all.filtered.tab')
    shell:
        'python {params.script} --verbose {input.sj} > {output}'
    
rule new_genome_index:
    input: 
        genome = join(ENSEMBL_EXT, 'fasta', 'genome.fa'),
        gtf = join(ENSEMBL_EXT, 'genes', 'genes.gtf'),
        junctions = rules.filter_1pass_junctions.output,
        clean_mem = rules.clean_sharedmem_1pass.output
    output:
        join(STAR_INTERIM, '_STARgenome', 'SA')
    params: 
        genome_dir = join(STAR_INTERIM, '_STARgenome'),
        read_length = rules.star_firstpass.params.read_length
    threads:
        16
    benchmark:
        'timings/build.2pass.genome.time'
    conda:
        'envs/align.yaml'        
    shell:
        'STAR '
        '--runThreadN {threads} '
        '--runMode genomeGenerate '
        '--genomeDir {params.genome_dir} '
        '--genomeFastaFiles {input.genome} '
        '--sjdbGTFfile {input.gtf} '
        '--sjdbFileChrStartEnd {input.junctions} '
        '--sjdbOverhang {params.read_length} '

if config['align']['star']['twopass']:
    rule star:
        input:
            genome = rules.new_genome_index.output,
            fastq = get_processed_fastq
        params:
            fastq = star_input_params,
            sj = rules.star_firstpass.output,
            sj_all = rules.filter_1pass_junctions.output,
            prefix = lambda wildcards, output: output[0].split('Aligned.sortedByCoord.out.bam')[0],
            read_length = index_read_length(),
            genome_dir = lambda wildcards, input: os.path.dirname(input[0])
        output:
            bam = temp(join(TMPDIR, 'STAR', '{sample}.Aligned.sortedByCoord.out.bam'))
        threads:
            48
        log:
            'logs/{sample}.Log.final.out'
        conda:
            'envs/align.yaml'            
        benchmark:
            'timings/{sample}.star.2pass.time'
        shell: 
            'STAR '
            '--runThreadN {threads} '
            '--genomeDir {params.genome_dir} '
            '--genomeLoad LoadAndKeep '
            '--readFilesCommand zcat '
            '--limitBAMsortRAM 20000000000 ' 
            '--outSAMtype BAM SortedByCoordinate '
            '--outFilterType BySJout '
            '--sjdbFileChrStartEnd {params.sj_all} {params.sj} '
            '--outMultimapperOrder Random '
            '--outSAMmultNmax 20 '
            '--outSAMstrandField intronMotif '
            '--outReadsUnmapped Fastx '
            '--sjdbOverhang {params.read_length} '
            '--outFileNamePrefix {params.prefix} '
            '--readFilesIn {params.fastq} '
            '&& mv {params.prefix}Log.final.out {log} '
else:
    rule star:
        input:
            genome = genome('indices/star/genome_r{:d}/SA'.format(index_read_length())),
            fastq = get_processed_fastq
        params:
            fastq = star_input_params,
            prefix=lambda wildcards, output: output[0].split('Aligned.sortedByCoord.out.bam')[0],
            read_length = index_read_length(),
            genome_dir = lambda wildcards, input : os.path.split(input[0])
        output:
            bam = temp(join(TMPDIR, 'STAR', '{sample}.Aligned.sortedByCoord.out.bam'))
        threads:
            48
        log:
            'logs/{sample}.Log.final.out'
        conda:
            'envs/align.yaml'    
        shell: 
            'STAR '
            '--runThreadN {threads} '
            '--genomeDir {params.genome_dir} '
            '--genomeLoad LoadAndKeep '
            '--readFilesCommand zcat '
            '--limitBAMsortRAM 20000000000 ' 
            '--outSAMtype BAM SortedByCoordinate '
            '--outFilterType BySJout '
            '--outMultimapperOrder Random '
            '--outSAMmultNmax 20 '
            '--outSAMstrandField intronMotif '
            '--outReadsUnmapped Fastx '
            '--outFileNamePrefix {params.prefix} '
            '--readFilesIn {params.fastq} '
            '&& mv {params.prefix}Log.final.out {log} '

rule star_mark_duplicates:
    input:
        bam = rules.star.output.bam,
    output:
        bam = join(STAR_INTERIM, '{sample}.sorted.bam')
    threads:
        4
    shell:
        'sambamba markdup -t {threads} {input.bam} {output.bam} '

rule star_index_bam:
    input:
        rules.star_mark_duplicates.output.bam
    output:
        bai = join(STAR_INTERIM, '{sample}.sorted.bam.bai')
    threads:
        4
    shell:
        'sambamba index -t {threads} {input} '
           
rule star_namesort_bam:
    input:
       rules.star_mark_duplicates.output.bam,
       rules.star_index_bam.output
    output:
        join(STAR_INTERIM, '{sample}.namesorted.bam')
    threads:
        8
    shell:
        'sambamba sort -N -p -m 24G -t {threads} -o {output} {input}'
