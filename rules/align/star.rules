#-*- mode: snakemake -*-
"""

Snakemake rules for aligning rna-seq fastq files to genome using the
STAR aligner.

This is a single pass alignment with known reference and gene model. The
output is coordinate sorted bam files with marked duplicates and the
companion index (.bai) file.


Dependencies
------------
STAR, https://github.com/alexdobin/STAR
SAMBAMBA,

"""

import os
from os.path import join

extra_conf_fn = srcdir('star.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

STAR_INTERIM = join(ALIGN_INTERIM, 'star')
STAR_PROCESSED = join(ALIGN_PROCESSED, 'star')
REF = config['align']['reference']


def star_input_params(wildcards):
    """Multiple fastq files per sample workaround.

    STAR uses comma separated input when defining a read with mutiple fastq files.
    A comma separated string is not a valid input file in snakemake.
    A work around in snakemake is to build the comma separated input string as a params.fastq
    
    """
    R1 = get_processed_fastq_R1(wildcards)
    if config['samples'][wildcards.sample]['paired_end']: 
        R2 = get_processed_fastq_R2(wildcards)
    else:
        R2 = []
    R1 = ','.join(sorted(set(R1)))
    R2 = ','.join(sorted(set(R2)))
    input_string = ' '.join([R1, R2])
    return input_string

rule star_firstpass:
    input:
        genome = join(ENSEMBL_EXT, 'star', 'SA'),
        R1 = get_processed_fastq_R1
    params:
        prefix = join(STAR_INTERIM, '{sample}.'),
        fastq = star_input_params,
        genome_dir = join(ENSEMBL_EXT, 'star')
    output:
        bam = join(STAR_INTERIM, '{sample}.Aligned.sortedByCoord.out.bam')
    threads:
        48
    log:
        'logs/{sample}.1pass.Log.final.out'
    conda:
        'envs/align.yaml'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {params.genome_dir} '
        '--twopassMode Basic ' 
        '--readFilesCommand zcat '
        '--limitBAMsortRAM 25000000000 '
        '--outFilterType BySJout '
        '--outMultimapperOrder Random '
        '--outReadsUnmapped Fastx '
        '--outSAMtype BAM SortedByCoordinate '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {params.fastq} '
        '&& mv {params.prefix}Log.final.out {log} '

