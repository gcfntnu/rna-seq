#-*- mode: snakemake -*-
"""

Snakemake rules for aligning rna-seq fastq files to genome using the
STAR aligner.

This is a single pass alignment with known reference and gene model. The
output is coordinate sorted bam files with marked duplicates and the
companion index (.bai) file.


Dependencies
------------
STAR, https://github.com/alexdobin/STAR
SAMBAMBA,

"""

import os
from os.path import join

extra_conf_fn = srcdir('star.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

STAR_INTERIM = join(ALIGN_INTERIM, 'star')
STAR_PROCESSED = join(ALIGN_PROCESSED, 'star')

def star_input_params(wildcards):
    """Multiple fastq files per sample workaround.

    STAR uses comma separated input when defining a read with mutiple fastq files.
    A comma separated string is not a valid input file in snakemake.
    A work around in snakemake is to build the comma separated input string as a params.fastq
    
    """
    fastq = get_processed_fastq(wildcards)
    R1 = fastq['R1']
    R2 = fastq.get('R2', [])
    R1 = ','.join(sorted(set(R1)))
    R2 = ','.join(sorted(set(R2)))
    input_string = ' '.join([R1, R2])
    return input_string

rule star_genome_index:
    input: 
        genome = join(REF_DIR, 'fasta', 'genome.fa'),
        gtf = join(REF_DIR, 'genes', 'genes.gtf')
    output:
         index = join(REF_DIR, 'star', 'Genome'),
         chr_len = join(REF_DIR, 'star', 'chrNameLength.txt')
    params:
        index_dir =  join(REF_DIR, 'star'),
        readlength = '66'
    threads:
        24
    priority:
        10
    log:
        join(REF_DIR, 'logs', 'STAR.index.log')
    singularity:
        'docker://flatberg/star:2.6.1d' 
    shell:
        'STAR '
        '--runThreadN {threads} '
        '--runMode genomeGenerate '
        '--genomeDir {params.index_dir} '
        '--genomeFastaFiles {input.genome} '
        '--sjdbGTFfile {input.gtf} '
        '--sjdbOverhang {params.readlength} '
        '&& mv Log.out {log}'

rule star_firstpass:
    input:
        unpack(get_processed_fastq),
        genome = join(REF_DIR, 'star', 'Genome')
    params:
        prefix = lambda wildcards, output: output[0].split('SJ.out.tab')[0],
        fastq = star_input_params,
        genome_dir = join(REF_DIR, 'star')
    output:
        sj = join(STAR_INTERIM, '{sample}.firstpass.SJ.out.tab')
    threads:
        48
    log:
        'logs/{sample}/1pass.Log.final.out'
    singularity:
        'docker://flatberg/star:2.6.1d'
    shell: 
        'STAR '
        '--runThreadN {threads} '
        '--genomeDir {params.genome_dir} '
        '--genomeLoad LoadAndKeep '
        '--outFilterType BySJout '
        '--outSAMtype None '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {params.fastq} '
        '&& cp {params.prefix}Log.final.out {log} '

rule star_collect_1pass_junctions:
    input:
        junctions = expand(rules.star_firstpass.output, sample=SAMPLES)
    params:
        script = srcdir('scripts/sjCollapseSamples.awk')
    output:
        join(STAR_INTERIM, 'SJ.out.firstpass.tab')
    shell:
        'awk -f {params.script} {input.junctions} | sort -k1,1V -k2,2n -k3,3n > {output}'

rule star_clean_memory_1pass:
    input:
        rules.star_collect_1pass_junctions.output
    params:
        rules.star_firstpass.params.genome_dir
    output:
        temp(touch('.star.mem.1pass.cleaned'))
    singularity:
        'docker://flatberg/star:2.6.1d'                
    priority:
        0
    shell:
        'STAR '
        '--genomeDir {params} '
        '--genomeLoad Remove '
        '--outFileNamePrefix /tmp/foo '
        '|| echo "NO firstpass SHARED MEMORY" '
        
rule star_filter_junctions:
    input:
        sj = join(STAR_INTERIM, 'SJ.out.firstpass.tab')
    params:
        script = srcdir('scripts/filter_junctions.py'),
        args = '--min-unique-mappers 50 --max-overhang 20 --samples_detected 10 --verbose '
    output:
        sj = join(STAR_INTERIM, 'SJ.out.filtered.tab')
    shell:
        'python {params.script} {params.args} {input.sj} > {output}'

if config['align']['star']['twopass']:
    filter_sj = config['align']['star']['filter_sj']
    rule star_align:
        input:
            unpack(get_processed_fastq),
            genome = join(REF_DIR, 'star', 'Genome'),
            sj = join(STAR_INTERIM, 'SJ.out.filtered.tab') if filter_sj else expand(rules.star_firstpass.output, sample=SAMPLES),
            mem = rules.star_clean_memory_1pass.output
        params:
            fastq = star_input_params,
            prefix = lambda wildcards, output: output.bam.split('Aligned.sortedByCoord.out.bam')[0],
            genome_dir = lambda wildcards, input: os.path.dirname(input.genome)
        output:
            bam = temp(join(STAR_INTERIM, '{sample}.Aligned.sortedByCoord.out.bam')),
            unmapped = join(STAR_INTERIM, '{sample}.Unmapped.out.mate1')
        threads:
            48
        log:
            'logs/{sample}/Log.final.out'
        singularity:
            'docker://flatberg/star:2.6.1d'    
        shell: 
            'STAR '
            '--runThreadN {threads} '
            '--genomeDir {params.genome_dir} '
            '--outSAMtype BAM SortedByCoordinate '
            '--outFilterType BySJout '
            '--sjdbFileChrStartEnd {input.sj} '
            '--outMultimapperOrder Random '
            '--outSAMmultNmax 20 '
            '--limitSjdbInsertNsj 2500000 '
            '--outSAMstrandField intronMotif '
            '--outReadsUnmapped Fastx '
            '--outFileNamePrefix {params.prefix} '
            '--readFilesIn {params.fastq} '
            '&& cp {params.prefix}Log.final.out {log} '
else:
    rule star_align:
        input:
            unpack(get_processed_fastq),
            genome = join(REF_DIR, 'star', 'Genome')
        params:
            fastq = star_input_params,
            prefix = lambda wildcards, output: output.bam.split('Aligned.sortedByCoord.out.bam')[0],
            genome_dir = lambda wildcards, input : os.path.dirname(input.genome)
        output:
            bam = temp(join(STAR_INTERIM, '{sample}.Aligned.sortedByCoord.out.bam'))
        threads:
            16
        log:
            'logs/{sample}/Log.final.out'
        singularity:
            'docker://flatberg/star:2.6.1d'
        shell: 
            'STAR '
            '--runThreadN {threads} '
            '--genomeDir {params.genome_dir} '
            '--genomeLoad LoadAndKeep '
            '--limitBAMsortRAM 20000000000 ' 
            '--outSAMtype BAM SortedByCoordinate '
            '--outFilterType BySJout '
            '--outMultimapperOrder Random '
            '--outSAMmultNmax 20 '
            '--outSAMstrandField intronMotif '
            '--outReadsUnmapped Fastx '
            '--outFileNamePrefix {params.prefix} '
            '--readFilesIn {params.fastq} '
            '&& cp {params.prefix}Log.final.out {log} '
