#-*- mode:snakemake -*-
"""
NOTES:
"""
from os.path import join

RRNA_DIR = join(EXT_DIR, 'rrna')

def rrna_get_fasta(*args, **kw):
    ref = config['filter']['ribosomal']['ref']
    if not ref == 'ncbi':
        raise NotImplementedError
    org = config['organism']
    out = []
    out.append(join(EXT_DIR, 'ncbi', org, 'fasta', 'rrna.fa'))
    return out

rule rrna_fasta:
    input:
        rrna_get_fasta
    output:
        join(EXT_DIR, 'rrna', 'fasta', 'rrna.fa')
    shell:
        'cat {input} > {output}'

rule rrna_unitas:
    input:
        rules.rrna_fasta.output
    params:
        script = srcdir('scripts/rrna_unitas.py')
    output:
        temp(join(INTERIM_DIR, '_rrna_unitas_formatted.fa'))
    shell:
        'python {params.script} {input} > {output}'

rule rrna_build_index_bowtie:
    input:
        rules.rrna_fasta.output
    output:
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.1.ebwt'),
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.2.ebwt'),
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.3.ebwt'),
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.4.ebwt'),
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.rev.1.ebwt'),
        join(RRNA_DIR, 'index', 'bowtie', 'rrna.rev.2.ebwt')
    params:
        index = join(RRNA_DIR, 'index', 'bowtie', 'rrna')
    singularity:
        'docker://flatberg/filter:0.1'
    shell:
        'bowtie-build {input} {params.index}'

rule rrna_build_index_bowtie2:
    input:
        rules.rrna_fasta.output
    output:
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.1.bt2'),
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.2.bt2'),
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.3.bt2'),
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.4.bt2'),
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.rev.1.bt2'),
        join(RRNA_DIR, 'index', 'bowtie2', 'rrna.rev.2.bt2')
    params:
        index = join(RRNA_DIR, 'index', 'bowtie2', 'rrna')
    conda:
        'envs/rrna.yaml'
    singularity:
        'docker://flatberg/filter:0.1'
    shell:
        'bowtie2-build {input} {params.index}'

rule rrna_filter_se_bowtie:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R1.fastq'),
        index = rules.rrna_build_index_bowtie.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'rrna', 'bowtie', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'rrna', 'bowtie', '{sample}.counts')
    singularity:
        'docker://flatberg/filter:0.1'
    params:
        args = '-n 0 -k 1 -l 18 -q --best --norc -S ',
        index = rules.rrna_build_index_bowtie.params.index
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.{merge}.rrna.bowtie.log',
        error = 'logs/{sample}/filter.{merge}.rrna.bowtie.error'
    shell:
        'bowtie {params.index} '
        '{input.R1} '
        '--un {output.R1} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -q 5 -S - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '
        
rule rrna_filter_se_bowtie2:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R1.fastq'),
        index = rules.rrna_build_index_bowtie2.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'rrna', 'bowtie2', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'rrna', 'bowtie2', '{sample}.counts')
    params:
        args = '-D 15 -R 2 -N 0 -L 18 -i S,1,0 --norc',
        index = rules.rrna_build_index_bowtie2.params.index
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.{merge}.rrna.bowtie2.log',
        error = 'logs/{sample}/filter.{merge}.error'
    shell:
        'bowtie2 '
        '-U {input.R1} '
        '--un {output.R1} '
        '-x {params.index} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '

rule rrna_build_index_bbmap:
    input:
         rules.rrna_fasta.output
    output:
        join(RRNA_DIR, 'index', 'bbmap', 'ref', 'genome', '1', 'info.txt')
    params:
        index = join(RRNA_DIR, 'index', 'bbmap')
    singularity:
        'docker://quay.io/biocontainers/bbmap'
    shell:
        'bbmap.sh ref={input} path={params.index}'

rule rrna_filter_se_bbduk:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R1.fastq'),
        ref = rules.rrna_fasta.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'rrna', 'bbduk', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'rrna', 'bbduk', '{sample}.counts')
    singularity:
        'docker://quay.io/biocontainers/bbmap'
    threads:
        4
    log:
        'logs/{sample}/filter.{merge}.rrna.bbduk.log'
    shell:
        'bbduk.sh in={input.R1} overwrite=true outu={output.R1} threads={threads} rcomp=f k=21 stats={output.counts} ref={input.ref} 2>{log}'


rule rrna_filter_se_bbduk_universal:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R1.fastq'),
        ref = join(EXT_DIR, 'JGI', 'rrna', 'ribokmers.fa.gz')
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'rrna', 'bbduk_universal', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'rrna', 'bbduk_universal', '{sample}.counts')
    singularity:
        'docker://flatberg/filter:0.1'
    log:
        'logs/{sample}/filter.{merge}.rrna.bbduk.log'
    threads:
        8
    shell:
        'bbduk.sh t={threads} overwrite=true in={input.R1} k=31 rcomp=f outu={output.R1} stats={output.counts} ref={input.ref} 2> {log}'

#SMDB = config['filter']['sortmerna']['db'].split(',')
SMDB = 'silva-arc-16s-id95 silva-arc-23s-id98'.split()

rule rrna_filter_se_sortmerna:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R1.fastq'),
        ref = expand(join(EXT_DIR, 'sortmerna', '{db}.idx.stats'), db=SMDB)
    output:
        fastq = join(FILTER_INTERIM, '{merge}', 'rrna', 'sortmerna', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'rrna', 'sortmerna', '{sample}.counts')
    params:
        args = '--fastx --sam ',
        ref = ':'.join([','.join(i) for i in zip(expand(join(EXT_DIR, 'sortmerna', '{db}.fasta'), db=SMDB), expand(join(EXT_DIR, 'sortmerna', '{db}.idx'), db=SMDB))])
    singularity:
        'docker://flatberg/filter:0.1'
    shell:
        'sortmerna '
        '--reads {input.R1} '
        '--ref {params.ref} '
        '{params.args} '

rule rrna_skip:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'contaminants', config['filter']['contaminants']['quantifier'], '{sample}_R{readnum}.fastq')
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'rrna', 'skip', '{sample}_R{readnum}.fastq')
    shell:
        'ln -sr {input} {output}'
