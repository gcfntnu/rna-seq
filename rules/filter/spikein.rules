#-*- mode:snakemake -*-
"""

"""
from os.path import join

SPIKE_DIR = join(EXT_DIR, 'spikein')

def spikein_get_fasta(*args, **kw):
    ref = config['filter']['spikein']['ref'].split(',')
    out = []
    for r in ref:
        if r.lower() == 'ercc':
            out.append(join(EXT_DIR, 'ERCC', 'ERCC92.fa'))
        if r.lower() == 'smallrna_calibrators':
            out.append(join(EXT_DIR, 'smallrna_calibrators', 'calibrators.dna.fa'))
    return out

rule spikein_fasta:
    input:
        spikein_get_fasta
    output:
        join(SPIKE_DIR, 'fasta', 'spikein.fa')
    shell:
        'cat {input} > {output}'

rule spikein_build_index_bowtie:
    input:
        rules.spikein_fasta.output
    output:
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.1.ebwt'),
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.2.ebwt'),
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.3.ebwt'),
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.4.ebwt'),
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.rev.1.ebwt'),
        join(SPIKE_DIR, 'index', 'bowtie', 'spikein.rev.2.ebwt')
    params:
        index = join(SPIKE_DIR, 'index', 'bowtie', 'spikein')
    singularity:
        'docker://flatberg/filter:0.1'
    shell:
        'bowtie-build {input} {params.index}'

rule spikein_build_index_bowtie2:
    input:
        rules.spikein_fasta.output
    output:
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.1.bt2'),
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.2.bt2'),
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.3.bt2'),
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.4.bt2'),
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.rev.1.bt2'),
        join(SPIKE_DIR, 'index', 'bowtie2', 'spikein.rev.2.bt2')
    params:
        index = join(SPIKE_DIR, 'index', 'bowtie2', 'spikein')
    conda:
        'envs/spikein.yaml'
    singularity:
        'docker://flatberg/filter:0.1'
    shell:
        'bowtie2-build {input} {params.index}'

rule spikein_filter_se_bowtie:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', config['filter']['trim']['trimmer'], '{sample}_R1.fastq'),
        index = rules.spikein_build_index_bowtie.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie', '{sample}_R1.counts')
    singularity:
        'docker://flatberg/filter:0.1'
    params:
        args = '-n 0 -k 1 -l 18 -q --best --norc -S ',
        index = rules.spikein_build_index_bowtie.params.index
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.{merge}.spikein.bowtie.log',
        error = 'logs/{sample}/filter.{merge}.spikein.bowtie.error'
    shell:
        'bowtie {params.index} '
        '{input.R1} '
        '--un {output.R1} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -q 5 -S - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '
        
rule spikein_filter_se_bowtie2:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', config['filter']['trim']['trimmer'], '{sample}_R1.fastq'),
        index = rules.spikein_build_index_bowtie2.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bowtie2', '{sample}_R1.counts')
    singularity:
        'docker://flatberg/filter:0.1'
    params:
        args = '-D 15 -R 2 -N 0 -L 18 -i S,1,0 --norc',
        index = rules.spikein_build_index_bowtie2.params.index
    threads:
        2
    log:
        bowtie = 'logs/{sample}/filter.{merge}.spikein.bowtie2.log',
        error = 'logs/{sample}/filter.{merge}.error'
    shell:
        'bowtie2 '
        '-U {input.R1} '
        '--un {output.R1} '
        '-x {params.index} '
        '-p {threads} '
        '{params.args} '
        '2>> {log.bowtie} '
        '| samtools view -S -q5 - | cut -f3 | sort | uniq -c  > {output.counts} '
        '2>> {log.error} '

rule spikein_build_index_bbmap:
    input:
         rules.spikein_fasta.output
    output:
        join(SPIKE_DIR, 'index', 'bbmap', 'ref', 'genome', '1', 'info.txt')
    params:
        index = join(SPIKE_DIR, 'index', 'bbmap')
    singularity:
        'docker://quay.io/biocontainers/bbmap'
    shell:
        'bbmap.sh ref={input} path={params.index}'

rule spikein_filter_se_bbduk:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', config['filter']['trim']['trimmer'], '{sample}_R1.fastq'),
        ref = rules.spikein_fasta.output
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'spikein', 'bbduk', '{sample}_R1.fastq'),
        counts = join(FILTER_INTERIM, '{merge}', 'spikein', 'bbduk', '{sample}_R1.counts')
    singularity:
        'docker://quay.io/biocontainers/bbmap'
    threads:
        4
    log:
        'logs/{sample}/filter.{merge}.spikein.bbduk.log'
    shell:
        'bbduk.sh in={input.R1} overwrite=true outu={output.R1} threads={threads} rcomp=f k=21 stats={output.counts} ref={input.ref} 2>{log}'

rule spikein_filter_se_skip:
    input:
        R1 = join(FILTER_INTERIM, '{merge}', 'trimmed', config['filter']['trim']['trimmer'], '{sample}_R1.fastq')
    output:
        R1 = join(FILTER_INTERIM, '{merge}', 'spikein', 'skip', '{sample}_R1.fastq')
    shell:
        'ln -sr {input} {output}'
