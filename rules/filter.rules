#-*- mode: snakemake -*-
"""
Snakemake rules for filtering rna-seq fastq files before analysis.

Skewer used for standard filtering, fqtrim used when filter + read collapsing
"""
import os
from os.path import join, basename
import yaml

from snakemake.workflow import srcdir
from snakemake.logging import logger

extra_conf_fn = srcdir('filter.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

FILTER_INTERIM = join(INTERIM_DIR, 'rnaseq', 'filter')
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')
filter_conf = config['filter']

def _filter_get_raw_R1(wildcards):
    sscol = filter_conf.get('merge', {}).get('sscol', 'Sample_ID')
    skip = filter_conf.get('merge', {}).get('skip', True)
    if sscol == 'Sample_ID' or skip:
        fastq_files = config['samples'][wildcards.sample]['R1'].split(',')
    else:
        fastq_files = []
        for sample, values in config['samples'].items():
            if values[sscol] == wildcards.sample:
                fastq_files.extend(values['R1'].split(','))
    return [os.path.join(FASTQ_DIR, i) for i in fastq_files]

def _filter_get_raw_R2(wildcards):
    sscol = filter_conf.get('merge', {}).get('sscol', 'Sample_ID')
    skip = filter_conf.get('merge', {}).get('skip', True)
    if sscol == 'Sample_ID' or skip:
        fastq_files = config['samples'][wildcards.sample]['R2'].split(',')
    else:
        fastq_files = []
        for sample, values in config['samples'].items():
            if values[sscol] == wildcards.sample:
                fastq_files.extend(values['R1'].split(','))
    return [os.path.join(FASTQ_DIR, i) for i in fastq_files]


include:
    'filter/fastp.rules'
    
def get_processed_fastq_R1(wildcards):
    fastq_files = _filter_get_raw_R1(wildcards)
    merge = config['filter']['merge']['skip'] == False
    if config['filter']['skip']:
        if merge:
            raise NotImplementedError
        return fastq_files
    if merge:
        PTH = join(FILTER_INTERIM, 'concat')
    else:
        PTH = join(INTERIM_DIR, 'rnaseq', 'filter')
    if config['samples'][wildcards.sample]['paired_end']:
        R1 = [join(PTH, 'fastp_pe', basename(fn)) for fn in fastq_files]
    else:
        R1 = [join(PTH, 'fastp_se', basename(fn)) for fn in fastq_files]
    return R1

def get_processed_fastq_R2(wildcards):
    fastq_files = _filter_get_raw_R2(wildcards)
    merge = config['filter']['merge']['skip'] == False
    if config['filter']['skip']:
        if merge:
            raise NotImplementedError
        return fastq_files
    if merge:
        PTH = join(FILTER_INTERIM, 'concat')
    else:
        PTH = join(INTERIM_DIR, 'rnaseq', 'filter')
    return [join(PTH, 'fastp_pe', basename(fn)) for fn in fastq_files]
