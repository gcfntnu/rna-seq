#-*- mode: snakemake -*-
"""
Snakemake rules for filtering rna-seq fastq files before analysis.

Skewer used for standard filtering, fqtrim used when filter + read collapsing
"""
import os
from os.path import join, basename
import yaml

from snakemake.workflow import srcdir
from snakemake.logging import logger

extra_conf_fn = srcdir('filter.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        update_config2(config, c)

FILTER_INTERIM = join(INTERIM_DIR, 'rnaseq', 'filter')
FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')
LIBPREP_KIT = config.get('libprep', {}).get('kit')
LIBPREP_INFO = config['libprep_config'].get(LIBPREP_KIT, {})
ADAPTER = config.get('libprep', {}).get('adapter') or LIBPREP_INFO['single_end'].get('adapter')
ADAPTER2 = config.get('libprep', {}).get('adapter2') or LIBPREP_INFO['paired_end'].get('adapter2')

filter_conf = config['filter']

def _filter_get_raw_R1(wildcards):
    fastq_merge = filter_conf.get('fastq_merge', {})
    skip = fastq_merge.get('skip', True)
    if skip or fastq_merge['sscol'] == 'Sample_ID':
        fastq_files = config['samples'][wildcards.sample]['R1'].split(',')
    else:
        fastq_files = []
        sscol = fastq_merge['sscol']
        for sample, values in config['samples'].items():
            if values[sscol] == wildcards.sample:
                fastq_files.extend(values['R1'].split(','))
    fastq_files = [os.path.join(FASTQ_DIR, i) for i in fastq_files]
    return fastq_files

def _filter_get_raw_R2(wildcards):
    fastq_merge = filter_conf.get('fastq_merge', {})
    skip = fastq_merge.get('skip', True)
    if skip or fastq_merge['sscol'] == 'Sample_ID':
        fastq_files = config['samples'][wildcards.sample]['R2'].split(',')
    else:
        fastq_files = []
        sscol = fastq_merge['sscol']
        for sample, values in config['samples'].items():
            if values[sscol] == wildcards.sample:
                fastq_files.extend(values['R2'].split(','))
    fastq_files = [os.path.join(FASTQ_DIR, i) for i in fastq_files] 
    return fastq_files


include:
    'filter/fastp.rules'


def _get_trimmed_fastq_R1(wildcards):
    fastq_files = _filter_get_raw_R1(wildcards)
    fastq_merge = filter_conf.get('fastq_merge', {})
    skip = filter_conf.get('skip', False)
    trimmer = filter_conf.get('trimmer', 'fastp')
    if config['samples'][wildcards.sample]['paired_end']:
        DIR = '{}_pe'.format(trimmer)
    else:
        DIR = '{}_se'.format(trimmer)
    
    if skip:
        return fastq_files
    
    fastq_files = [fn.split(FASTQ_DIR + os.path.sep)[-1] for fn in fastq_files]
        
    if fastq_merge['sscol'] != 'Sample_ID':
        raise NotImplementedError
    
    if fastq_merge['skip']: 
        R1 = [join(FILTER_INTERIM, DIR, fn) for fn in fastq_files]
    else:
        R1 = [join(FILTER_INTERIM, DIR, 'concat', '{}_R1.fastq.gz'.format(wildcards.sample))]
    return R1

def _get_trimmed_fastq_R2(wildcards):
    fastq_files = _filter_get_raw_R2(wildcards)
    fastq_merge = filter_conf.get('fastq_merge', {})
    skip = filter_conf.get('skip', False)
    trimmer = filter_conf.get('trimmer', 'fastp')
    if config['samples'][wildcards.sample]['paired_end']:
        DIR = '{}_pe'.format(trimmer)
    else:
        DIR = '{}_se'.format(trimmer)
    
    if skip:
        return fastq_files
    
    fastq_files = [fn.split(FASTQ_DIR + os.path.sep)[-1] for fn in fastq_files]
        
    if fastq_merge['sscol'] != 'Sample_ID':
        raise NotImplementedError
    if fastq_merge['skip']: 
        R2 = [join(FILTER_INTERIM, DIR, fn) for fn in fastq_files]
    else:
        R2 = [join(FILTER_INTERIM, DIR, 'concat', '{}_R2.fastq.gz'.format(wildcards.sample))]    
       
    return R2

def get_processed_fastq_R1(wildcards):
    return _get_trimmed_fastq_R1(wildcards)
    
def get_processed_fastq_R2(wildcards):
    return _get_trimmed_fastq_R2(wildcards)
