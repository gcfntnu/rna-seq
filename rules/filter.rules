#-*- mode: snakemake -*-
"""
Snakemake rules for filtering rna-seq fastq files before analysis.

Skewer used for standard filtering, fqtrim used when filter + read collapsing
"""
import os
from os.path import join, abspath
import itertools
import sys
import yaml

from snakemake.workflow import srcdir
from snakemake.logging import logger


ADAPTER_DEFAULT = 'AGATCGGAAGAGCACACGTCTGAACTCCAGTCA'
ADAPTER = config.get('adapter', ADAPTER_DEFAULT)
if ADAPTER == 'NA':
    ADAPTER = ADAPTER_DEFAULT
TRIMMED_DIR = config['tmp_dir']
if not os.path.exists(TRIMMED_DIR):
    os.makedirs(TRIMMED_DIR)

FASTQ_DIR = config.get('fastq_dir', 'data/raw/fastq')


rule fastp_se:
    input:
        R1 = join(FASTQ_DIR, '{sample}_R1.fastq.gz')
    output:
        R1 = join(TRIMMED_DIR, 'fastp_se', '{sample}_R1.fastq.gz')
    threads:
        3
    conda:
        'envs/quant.yaml'
    log:
        json = 'logs/{sample}-fastp.json',
        html = 'logs/{sample}-fastp.html'
    params:
        '-f 10 '  # only for lexogen
    shell:
        'fastp -i {input.R1} -o {output.R1} -j {log.json} -h {log.html} {params}'

rule fastp_pe:
    input:
        R1 = join(FASTQ_DIR, '{sample}_R1.fastq.gz'),
        R2 = join(FASTQ_DIR, '{sample}_R2.fastq.gz')
    output:
        R1 = join(TRIMMED_DIR, 'fastp_pe', '{sample}_R1.fastq.gz'),
        R2 = join(TRIMMED_DIR, 'fastp_pe', '{sample}_R2.fastq.gz')
    threads:
        3
    conda:
        'envs/quant.yaml'
    params:
        '-f 10 -F 10 ' #lexogen
    log:
        json = 'logs/{sample}-fastp.json',
        html = 'logs/{sample}-fastp.html'        
    shell:
        'fastp -i {input.R1} -I {input.R2} -o {output.R1} -O {output.R2} -j {log.json} -h {log.html} {params}'

        
def get_processed_fastq(wildcards):
    """Return filename of trimmed/filtered fastq file
    """
    sample = config['samples'][wildcards.sample]
    out_files = {}
    R1 = []
    R2 = []
    if 'paired_end' in sample:
        PE = bool(sample['paired_end'])
    else:
        _R1 = sample.get('R1')
        _R2 = sample.get('R2')
        if _R2 is None or len(_R2) == 0:
            PE = False
        else:
            PE = True
    if PE:
        for r1_fn in sample['R1'].split(','):
            out_r1_fn = join(TRIMMED_DIR, 'fastp_pe', os.path.basename(r1_fn))
            R1.append(out_r1_fn)
        for r2_fn in sample['R2'].split(','):
            out_r2_fn = join(TRIMMED_DIR, 'fastp_pe', os.path.basename(r2_fn))
            R2.append(out_r2_fn)
    else:
        for r1_fn in sample['R1'].split(','):
            out_r1_fn = join(TRIMMED_DIR, 'fastp_se', os.path.basename(r1_fn))
            R1.append(out_r1_fn)
            R2.append('')
    out = list(i for i in itertools.chain(*zip(R1, R2)) if i)
    return out
